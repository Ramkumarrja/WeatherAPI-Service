import matplotlib.pyplot as plt
import matplotlib.dates as mdates
from reportlab.lib.pagesizes import letter, A4
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Image, Table, TableStyle
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch, cm
from reportlab.lib import colors
from reportlab.lib.enums import TA_CENTER, TA_LEFT
from io import BytesIO
from datetime import datetime
import tempfile
import os

class PDFService:
    def __init__(self):
        # Set matplotlib to use non-interactive backend
        plt.switch_backend('Agg')
    
    def generate_pdf_report(self, weather_data):
        """Generate PDF report with chart using ReportLab (Windows compatible)"""
        if not weather_data:
            return self._generate_empty_pdf()
        
        # Create buffer for PDF
        buffer = BytesIO()
        doc = SimpleDocTemplate(buffer, pagesize=A4, topMargin=1*inch)
        styles = getSampleStyleSheet()
        
        # Custom styles
        title_style = ParagraphStyle(
            'CustomTitle',
            parent=styles['Title'],
            fontSize=18,
            spaceAfter=30,
            alignment=TA_CENTER,
            textColor=colors.HexColor('#2c3e50')
        )
        
        heading_style = ParagraphStyle(
            'CustomHeading',
            parent=styles['Heading2'],
            fontSize=14,
            spaceAfter=15,
            textColor=colors.HexColor('#34495e')
        )
        
        # Story elements
        story = []
        
        # Add title
        title = Paragraph("Weather Data Report", title_style)
        story.append(title)
        story.append(Spacer(1, 20))
        
        # Add metadata
        metadata_text = self._generate_metadata_text(weather_data)
        metadata = Paragraph(metadata_text, styles['Normal'])
        story.append(metadata)
        story.append(Spacer(1, 30))
        
        # Add chart
        chart_img = self._create_chart_image(weather_data)
        if chart_img:
            chart_heading = Paragraph("Temperature and Humidity Trends", heading_style)
            story.append(chart_heading)
            story.append(chart_img)
            story.append(Spacer(1, 30))
        
        # Add data table
        table_heading = Paragraph("Sample Data (First 20 Records)", heading_style)
        story.append(table_heading)
        story.append(Spacer(1, 10))
        
        table_data = self._create_table_data(weather_data)
        if table_data:
            table = Table(table_data, colWidths=[3*cm, 2.5*cm, 2.5*cm])
            table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#34495e')),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                ('FONTSIZE', (0, 0), (-1, 0), 10),
                ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
                ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
                ('FONTNAME', (0, 1), (-1, -1), 'Helvetica'),
                ('FONTSIZE', (0, 1), (-1, -1), 8),
                ('GRID', (0, 0), (-1, -1), 1, colors.black),
                ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
            ]))
            story.append(table)
        
        # Add footer
        story.append(Spacer(1, 30))
        footer_text = "Generated by Weather API Service | Data source: Open-Meteo MeteoSwiss API"
        footer = Paragraph(footer_text, styles['Normal'])
        story.append(footer)
        
        # Build PDF
        doc.build(story)
        buffer.seek(0)
        return buffer

    def _generate_metadata_text(self, weather_data):
        """Generate metadata text for PDF"""
        if not weather_data:
            return "No weather data available"
            
        sample = weather_data[0]
        first_date = weather_data[0].timestamp.strftime('%Y-%m-%d %H:%M')
        last_date = weather_data[-1].timestamp.strftime('%Y-%m-%d %H:%M')
        
        # Count available data points
        temp_count = sum(1 for d in weather_data if d.temperature is not None)
        humidity_count = sum(1 for d in weather_data if d.humidity is not None)
        
        # Calculate temperature and humidity ranges
        valid_temps = [d.temperature for d in weather_data if d.temperature is not None]
        valid_humidities = [d.humidity for d in weather_data if d.humidity is not None]
        
        temp_range = f"{min(valid_temps):.1f}째C to {max(valid_temps):.1f}째C" if valid_temps else "N/A"
        humidity_range = f"{min(valid_humidities):.1f}% to {max(valid_humidities):.1f}%" if valid_humidities else "N/A"
        
        metadata_text = f"""
        <b>Report Generated:</b> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}<br/>
        <b>Location:</b> Latitude: {sample.latitude}, Longitude: {sample.longitude}<br/>
        <b>Date Range:</b> {first_date} to {last_date}<br/>
        <b>Total Records:</b> {len(weather_data)} hours<br/>
        <b>Temperature Data Points:</b> {temp_count}<br/>
        <b>Humidity Data Points:</b> {humidity_count}<br/>
        <b>Temperature Range:</b> {temp_range}<br/>
        <b>Humidity Range:</b> {humidity_range}<br/>
        <b>Data Type:</b> {'Historical (Past 2 Days)' if not getattr(sample, 'is_forecast', True) else 'Forecast'}<br/>
        """
        
        return metadata_text

    def _create_chart_image(self, weather_data):
        """Create matplotlib chart and return as ReportLab Image"""
        try:
            timestamps = [d.timestamp for d in weather_data]
            temperatures = [d.temperature for d in weather_data if d.temperature is not None]
            humidities = [d.humidity for d in weather_data if d.humidity is not None]
            temp_timestamps = [d.timestamp for d in weather_data if d.temperature is not None]
            humidity_timestamps = [d.timestamp for d in weather_data if d.humidity is not None]
            
            fig, ax1 = plt.subplots(figsize=(10, 6))
            
            # Plot temperature
            color = 'tab:red'
            ax1.set_xlabel('Time', fontweight='bold')
            ax1.set_ylabel('Temperature (째C)', color=color, fontweight='bold')
            line1 = ax1.plot(temp_timestamps, temperatures, color=color, linewidth=2, 
                           label='Temperature', marker='o', markersize=3)
            ax1.tick_params(axis='y', labelcolor=color)
            ax1.grid(True, alpha=0.3)
            
            # Plot humidity on second axis
            ax2 = ax1.twinx()
            color = 'tab:blue'
            ax2.set_ylabel('Humidity (%)', color=color, fontweight='bold')
            line2 = ax2.plot(humidity_timestamps, humidities, color=color, linewidth=2, 
                           label='Humidity', marker='s', markersize=3)
            ax2.tick_params(axis='y', labelcolor=color)
            
            # Format x-axis dates
            ax1.xaxis.set_major_formatter(mdates.DateFormatter('%m-%d %H:%M'))
            ax1.xaxis.set_major_locator(mdates.HourLocator(interval=6))
            plt.setp(ax1.xaxis.get_majorticklabels(), rotation=45)
            
            # Add title
            plt.title('Temperature and Humidity Trends (Past 48 Hours)', 
                     fontweight='bold', fontsize=14, pad=20)
            
            # Add legend
            lines = line1 + line2
            labels = [l.get_label() for l in lines]
            ax1.legend(lines, labels, loc='upper left', frameon=True, shadow=True)
            
            plt.tight_layout()
            
            # Save to temporary file
            with tempfile.NamedTemporaryFile(suffix='.png', delete=False) as tmp_file:
                plt.savefig(tmp_file.name, format='png', dpi=150, bbox_inches='tight', 
                           facecolor='white', edgecolor='none')
                plt.close(fig)
                
                # Create ReportLab Image
                chart_img = Image(tmp_file.name, width=6*inch, height=3.6*inch)
                
                # Clean up temporary file
                try:
                    os.unlink(tmp_file.name)
                except:
                    pass  # Ignore cleanup errors
                
                return chart_img
            
        except Exception as e:
            print(f"Chart creation error: {e}")
            return None

    def _create_table_data(self, weather_data):
        """Create table data for PDF"""
        table_data = [
            ['Timestamp', 'Temperature (째C)', 'Humidity (%)']
        ]
        
        # Add sample data (first 20 records)
        for data in weather_data[:20]:
            temp_str = f'{data.temperature:.1f}' if data.temperature is not None else 'N/A'
            humidity_str = f'{data.humidity:.1f}' if data.humidity is not None else 'N/A'
            
            table_data.append([
                data.timestamp.strftime('%Y-%m-%d %H:%M'),
                temp_str,
                humidity_str
            ])
        
        if len(weather_data) > 20:
            table_data.append([f'... and {len(weather_data) - 20} more records', '', ''])
        
        return table_data

    def _generate_empty_pdf(self):
        """Generate PDF when no data is available"""
        buffer = BytesIO()
        doc = SimpleDocTemplate(buffer, pagesize=A4)
        styles = getSampleStyleSheet()
        
        title_style = ParagraphStyle(
            'CustomTitle',
            parent=styles['Title'],
            fontSize=18,
            spaceAfter=30,
            alignment=TA_CENTER,
            textColor=colors.HexColor('#2c3e50')
        )
        
        story = [
            Paragraph("Weather Data Report", title_style),
            Spacer(1, 20),
            Paragraph("No weather data available for the selected time period.", styles['Normal']),
            Spacer(1, 20),
            Paragraph(f"Report Generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}", styles['Normal'])
        ]
        
        doc.build(story)
        buffer.seek(0)
        return buffer
